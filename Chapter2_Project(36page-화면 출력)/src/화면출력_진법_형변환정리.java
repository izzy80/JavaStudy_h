/*
 * => 41page ~ 84page
 * 	--------------------
 *  	화면 출력 / 키보드 입력값 / 형변환
 *      --------
 *      System.out.println() => 가장 많이 사용되는 화면 출력 기능(출력을 하고 다음줄로 이동해서 출력)
 *      System.out.print() => 다음 줄로 이동하지 않고 출력(옆으로 출력)
 *      System.out.printf() => 출력 형식을 만들어서 출력(서식있는 출력)
 *      => 데이터형 출력 종류 (%d => 정수, %f => 실수, %c => 문자, %s => 문자열) => %o, %x, %b
 *      																(8진법) ,(16진법), (boolean)
 *      => %5d ==> 출력할 때 5칸 확보
 *      			300
 *      			()()(3)(0)(0) => 오른쪽 정렬
 *      	%-5d ==> (3)(0)(0)()() => 왼쪽 정렬
 *		화면 입력
 *			Scanner ==> 사용방법(40page) ==> 도스에서만 사용(문법)
 *		1) 클래스 = 메모리 저장
 *		할때 반드시 변수 설정하고 new를 붙여서       
 *      Scanner scan = new Scanner(System.in) => System.in(키보드 입력값)
 *      				---- 클래스를 메모리에 저장시에 반드시 사용(동적 메모리 할당)
 *      					malloc() ==> new
 *      					free()   ==> delete : GC
 *      2) 클래스가 가지고 있는 기능을 활용
 *      	Scanner가 가지고 있는 기능 
 *      	정수값 받을 경우 : nextInt() (메소드 : 한가지 기능을 갖고 있다)
 *      	문자열 받는 경우 : next()
 *      	논리형 받는 경우 : nextBoolean()
 *      	실수형 받기 : nextDouble()
 *       ------------------------------------------java.io (BufferedReader) ==> 단. 예외처리 반드시 해야함. 
 *       진법
 *       	표현법 : 8진법(0~), 16진법(0x)
 *       	=> 2진법 : 0,1
 *       		8진법 : 0~7
 *       		16진법 : 0~15 => 10(a)~~15(f) ==> color지정 0xff ==> 255
 *       												16^1*15 + 16^0*15
 *       														----------15	
 *       												-------240 =============>255(white)
 *       
 *       10 ==> 1        0        1       0(2진법)
 *       		2^3*1	2^2*0   2^1*1    2^0*0
 *       		  8      0       2         0
 *       
 *       10 => 012
 *       8^0*2 ==> 2
 *       8^1*1 ==>8  ==> 10
 *       
 *       10 ==> 0xA
 *       
 *       => 음수 표현 (2의 보수) ==> 양수보다는 1이 크다
 *       						70 ==> -71(~ : 반전 연산자)
 *       
 *       ***** 형변환(UpCasting, DownCasting : 데이터형을 작게 변환)
 *       			---------   ----------
 *       			데이터형을 크게 변환
 *       			---------------- int ==> double(up 자동 형변환)
 *       							 int ==> char (down 강제 형변환)
 *       			1) UpCasting(보통 자동 형변환이라고 많이 함)
 *       				변수 초기값
 *       				double d= 10; ==> 10을 실수로 변경해서 저장 
 *       				------    --(int) d= 10.0
 *       				int a = 'A';
 *       						---int로 변경한 다음 대입 ==> int a = 65
 *     					---------------> 변수의 데이터형 >= 값
 *     					'A'
 *     					=> char, int, long, float, double : 가급적이면 같은 데이터형으로 받는 것이 좋다.   
 *       				   'A'   65    65L   65.0F  65.0
 *       				10.5F
 *       				=> float, double
 *       					10.5F   10.5
 *       				10.5
 *       				=>double 
 *       					10.5
 *       				10 
 *       				=> int, float, long, double
 *       					10  10.0F   10L    10.0
 *       				65
 *       				=> int, char
 *       					65  'A'
 *       				-> char는 작은데도 int형인 65를 사용 가능
 *       				-> char은 int를 받을 수 있음. 
 *       
 *       				연산자
 *       			
 *       = 자동 형변한
 *       = 강제 형변환
 *       ------------------------연산자에 등장
 *       
 *    오버플로우
 *    300 ==> 메모리에 저장
 *    byte b = (byte)300;
 *    int인데 byte에 저장. byte = 8bit = 8칸만 저장
 *    ----
 *    	256 128 64  32 16  8 4 2 1(0)
 *       1   0   0   1  0  1 1 0 0
 *    ---
 *       100101100
 *        ------- ==> 맨앞 1빠져서 44만 저장	      
 * 
 */
public class 화면출력_진법_형변환정리 {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
			char c = 65;
			System.out.println(c);
			//int a = 10.5;// 오류
			int a = (int)10.5;  //소수점을 지운다 ==> 10
			a = (int)10.5F;// 10
			a = (int)10L;//10 ==> 강제 형변환의 단점은 오버플로우
			
			//오버 플로우 예시
			byte b = (byte)300;
			System.out.println(b); //44
				
	}

}
