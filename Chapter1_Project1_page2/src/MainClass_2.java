/*
 * 1. 자바 설치
 * 	jdk.java.net/archive/
 * 	14~18
 * 2.Path : c:\jdk-17.02\bin $bin : 실행 파일(java, javac)
 * 3. classpath : 자바에서 지원하는 라이브러리 사용
 *  			.;c:\jdk-17.02/lib
 *  -----------------------------------------
 * 4. 편집기 : eclipse.org ==> 가장 최신버전 (JAVA, JAVAEE)
 * 	JAVA SE(일반 자바 => 자바 실행도구 , 라이브러리) ***
 * 	JAVA EE (기업용 환경 | 웹) ***
 * 	JAVA ME (모바일) ===> 이제 거의 X(Kotlin사용)
 * 5. STS(Spring, Spring-Boot), Oracle
 * ====================================================
 * 1) 자바 표현법
 * 	숫자 관련
 * 		정수
 * 		= 10진법 10, 20, ...
 * 		= 8진법 012, 011 $0이 들어가면 8진법!!$
 * 			   ---10
 * 				달력 ==> 01, 02, 03, 07, 08(오류가 난다) ==> 0xx
 * 		= 16진법 0xFF, 0xXX (사용빈도가 거의 없다)
 * 		실수 : 10.5(8byte), 10.5F(4byte)$메모리 절약$
 * 				double      float
 * 	문자 관련
 * 		= '' => 한 글자만 저장이 가능 'AB'(X) ==> 'A','홍'
 * 	문자열 관련 : 한 글자 이상 ==> "ABC", "A"...
 * 	논리 관련 : true / false
 * ===================================> 대소문자 구분, 문장 종료시 ;
 * ===================================> ;컴퓨터에 명령을 내리는 것. 
 * 										순차적으로 명령을 내린다. (알고리즘) ==> ;
 *                                      int a=10; 4바이트 메모리를 만들고 10을 저장해라. 
 * 2) 주석 : 컴파일시 번역에서 제외가 되는 부분 $초반에 많이 걸어놓으면 분석하기 편하다 $ => 8 page
 * 			int a = 90; //국어점수
 * 		주석 넣기 : ctrl+shift+/ , 주석 풀기 : ctrl+shift+\
 * 			ctrl+space 연습하기. 코딩 속도 빨라짐
 * 3) 문법 에러 사항
 * 	1. ;
 * 	2. main을 못 찾는 경우
 * 		메뉴 - project - clean누르기(버퍼 지우기) => 코드에 이상이 없는 데 실행이 안 된다. 
 * 	3. 대소문자 구분
 * --------------------------------클래스명(대문자 시작), 변수(소문자 시작), 메소드(소문자 시작)
 * 	4. {} => 들여쓰기 잘 하기. 
 * 		class A =====> c언어 코딩
 * 		{
 * 			public void main()
 * 			{
 * 				if()
 * 				{
 * 				}
 * 			}
 * 		} 
 * 
 * class A { ====> 자바 코딩
 * 		public void main(){
 * 			if(){
 * 			}
 * 		}
 * 		
 * 		저장명 => page 10
 * 		class A ==> A.java
 * 		{
 * 	
 * 		}
 * 
 * 	    =========================A.java, B.java
 * 		class A
 * 		{
 * 		}
 * 		class B
 * 		{
 * 		}
 * 		==================================
 * 
 * 		=============================B.java
 * 		class A
 * 		{
 * 		}
 *	 	public class B
 * 		{
 * 		}
 * 		===========================
 * 	4) 특징(3,4 page)
 * 		1. 운영체제가 독립적이다 (모든 운영체제에서 컴파일된 파일이 동일)
 * 		2. 개체 지향 프로그램(6장~7장)
 * 		= 재사용(상속, 포함) => 새롭게 추가, 기존의 기능 편집
 * 							오버로딩		오버라이팅
 * 		= 데이터 보호 : 캡슐화
 * 		= 유지 보수 목적
 * 		3. 배우기가 쉽다. (포인터, 구조체, 상속) ==> 자바에서 생략
 * 		4. 자동 메모리 관리
 * 			malloc, free, ==> new, delete ==> new, 가비지컬렉션
 * 			System.gc() = 멀티미디어
 * 		5. 동적 로딩
 * 			프로젝트 : 클래스가 여러개가 있다 ==> 필요시마다 로딩
 * 		========> 2장 ~ 8장, 9장(라이브러리) ~13장 , 나머지는 흐름 파악(쓰레드, 네트워크, 람다식)
 * 				------------------------------굉장히 많은 공부 필요!!
 * 		jdk ==> 실행 파일 종류, 가상머신 (JVM : 자바를 실행하기 위한 기계 장치) 확인하기. 
 * 									===운영체제에 따라 다르다.
 * 		자바 애플리케이션
 * 		============
 * 			|
 * 			JVM(미들웨어) => Mac, Linux, Window(32/64) ==> zip
 * 			|             ----------tar.gz
 * 			운영체제
 *  
 * 		보는 방법 : C드라이브 -> jdk-17/02 -> bin -> server -> jvm.dill(자바 가상 머신)
 *  	https://docs.oracle.com/javase/8/docs/api/ -> 자바 api 도움 문서
 * 		
 * 		실행과정
 * 		Hello.java ============|(JVM) Hello.class ===========화면에 출력
 * 					javac                           java
 * 
 * 		1. 명령어
 * 			1) javac : 컴파일러, 인터프리터 ==> 제임스 고슬링(두개를 동시에 쓰기 때문에 보안 뛰어남) ==> 샌드박스 ==> 인증
 * 				.java ==> .class
 * 			2) java : 실행시 사용
 * 			3) javap : .class ==> .java (역컴파일러 : 기계언어 -> 자바언어)
 * 			3) jar : 자바 zip파일
 * 			-------------------필수적으로 알아야할 명령어
 * 			동원증권 : 자바 구축(보안) ==> 5000만원
 * 					보안 업체 : 안랩 / 김랩 / 소프트포럼 (은행권이 주로 씀)
 * 										---------33대란 때 망함. 
 * 										-------------------------------------시조 터보백신(안양대 1학년)
 * 										바이로봇 ==> 92%, 치료(X) ==> 바보로봇
 * 										V3 ==> 86%, 치료(O)
 * 										---------------------------독일 Open(99%)
 * 			4) javah : c언어 호환
 * 			-----------------------------------명령어가 bin폴더 안에 들어간다. 
 * 
 * 꼭 외워야할것!
 * 1. path / classpath => 실무(노트북)
 * 2. 실행 과정
 * 3. 주석
 * ---------------------------
 * 알고는 있자!
 * 4. 표현법
 * 	8진법 : 0~
 * 	문자 : 'ㅁ'
 * 	문자열 : "abc"
 *
 */
public class MainClass_2 {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		System.out.println(012);
		
		
		  System.out.println("1"); System.out.println("2"); System.out.println("3");
		  System.out.println("4"); System.out.println("5");
		 
	}

}
